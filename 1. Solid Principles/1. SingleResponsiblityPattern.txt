
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

// single responsiblity pattern 
struct Journal
{
    
    string title ;
    vector <string> entries;
    
    explicit Journal (const string & title ):title{title}{
        
    }
    
    
    void add(const string & entry);
    
    // persistence is a seperate concern 
    void save(const string& filename);
};

void Journal::add(const string & entry ){
    static int count=1;
    entries.push_back((string)""+to_string(count++)+ " : "+ entry ); 
}

void Journal::save(const string & filename){
    ofstream ofs(filename);
    for(auto & s: entries)
        ofs<< s<<endl;
}

struct PersistenceManager{
    
    static void save(const Journal & j , const string & filename ){
        ofstream ofs(filename);
        for(auto &s : j.entries ){
            ofs<< s <<endl;
        }
    }
    
};


int main()
{
   Journal journal{"Dear Diary "};
   journal.add(" I am learning Design Pattern ");
   journal.add(" I sleep like kumbakarna today");
   
//   journal.save("diary.txt");
   PersistenceManager::save(journal,"diary2.txt");
    return 0;
}
