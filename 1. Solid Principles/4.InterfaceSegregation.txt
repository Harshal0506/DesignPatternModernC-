
#include <iostream>

using namespace std;


struct Document;

// struct IMachine{
//   virtual void print(Document & doc)=0;
//   virtual void fax(Document & doc )=0;
//   virtual void scan(Document & doc)=0;
// };


// struct MFP : IMachine{
//     void print(Document & doc) override;
//     void fax(Document & doc) override;
//     void scan(Document & doc) override;
// };

// 1. client does not need this scan 
// 2. Forcing implements to implement too much 

struct IPrinter{
    virtual void print(Document &doc)=0;
};

struct IScanner{
     virtual void scan(Document &doc)=0;  
};

struct Printer:IPrinter{
    void print(Document &doc) override;
};

struct Scanner:IScanner{
    void scan(Document & doc) override;
};
struct IMachine:IPrinter,IScanner{
    
};

struct Machine :IMachine{ // decorator 
    IPrinter & printer;
    IScanner & scanner;
    Machine(IPrinter & printer , IScanner& scanner):printer(printer),scanner(scanner)
    {
        
    }
    
    void print(Document &doc) override{
        printer.print(doc);
    }
    
    void scan(Document &doc) override{
        scanner.scan(doc);
    }
};



int main()
{
    cout<<"Hello World";

    return 0;
}
